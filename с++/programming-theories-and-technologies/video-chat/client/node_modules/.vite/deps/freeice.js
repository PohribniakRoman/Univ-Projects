import {
  __commonJS
} from "./chunk-5WWUZCGV.js";

// node_modules/normalice/index.js
var require_normalice = __commonJS({
  "node_modules/normalice/index.js"(exports, module) {
    var protocols = [
      "stun:",
      "turn:"
    ];
    module.exports = function(input) {
      var url = (input || {}).url || input;
      var protocol;
      var parts;
      var output = {};
      if (typeof url != "string" && !(url instanceof String)) {
        return input;
      }
      url = url.trim();
      protocol = protocols[protocols.indexOf(url.slice(0, 5))];
      if (!protocol) {
        return input;
      }
      url = url.slice(5);
      parts = url.split("@");
      output.username = input.username;
      output.credential = input.credential;
      if (parts.length > 1) {
        url = parts[1];
        parts = parts[0].split(":");
        output.username = parts[0];
        output.credential = (input || {}).credential || parts[1] || "";
      }
      output.url = protocol + url;
      output.urls = [output.url];
      return output;
    };
  }
});

// node_modules/freeice/stun.json
var require_stun = __commonJS({
  "node_modules/freeice/stun.json"(exports, module) {
    module.exports = [
      "stun.l.google.com:19302",
      "stun1.l.google.com:19302",
      "stun2.l.google.com:19302",
      "stun3.l.google.com:19302",
      "stun4.l.google.com:19302",
      "stun.ekiga.net",
      "stun.ideasip.com",
      "stun.schlund.de",
      "stun.stunprotocol.org:3478",
      "stun.voiparound.com",
      "stun.voipbuster.com",
      "stun.voipstunt.com",
      "stun.voxgratia.org"
    ];
  }
});

// node_modules/freeice/turn.json
var require_turn = __commonJS({
  "node_modules/freeice/turn.json"(exports, module) {
    module.exports = [];
  }
});

// node_modules/freeice/index.js
var require_freeice = __commonJS({
  "node_modules/freeice/index.js"(exports, module) {
    var normalice = require_normalice();
    var freeice = function(opts) {
      var servers = {
        stun: (opts || {}).stun || require_stun(),
        turn: (opts || {}).turn || require_turn()
      };
      var stunCount = (opts || {}).stunCount || 2;
      var turnCount = (opts || {}).turnCount || 0;
      var selected;
      function getServers(type, count) {
        var out = [];
        var input = [].concat(servers[type]);
        var idx;
        while (input.length && out.length < count) {
          idx = Math.random() * input.length | 0;
          out = out.concat(input.splice(idx, 1));
        }
        return out.map(function(url) {
          if (typeof url !== "string" && !(url instanceof String)) {
            return url;
          } else {
            return normalice(type + ":" + url);
          }
        });
      }
      selected = [].concat(getServers("stun", stunCount));
      if (turnCount) {
        selected = selected.concat(getServers("turn", turnCount));
      }
      return selected;
    };
    module.exports = freeice;
  }
});
export default require_freeice();
//# sourceMappingURL=freeice.js.map
